theory Environment
  imports Main DataTypes Buffers ParentParty 
begin
record environment =
  parent_parties :: "parent_party list"
  outgoing_buffers :: "buffer list" (* Leaky Buffer list, actually. *)

(* How do I deal with passed  methods? *)
datatype env_call = EnvironmentCall "'a environment_scheme \<Rightarrow> port_no \<Rightarrow> msg \<Rightarrow> msg option"
datatype adversarial_probe = AdversarialProbe "'a environment_scheme \<Rightarrow> msg \<Rightarrow> msg" 

definition set_outgoing_buffers :: "'a environment_scheme \<Rightarrow> buffer list \<Rightarrow> 'a environment_scheme" where
"set_outgoing_buffers e bl = e\<lparr> outgoing_buffers := bl \<rparr>"




end
